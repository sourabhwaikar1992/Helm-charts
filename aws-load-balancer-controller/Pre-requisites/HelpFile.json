## Pre-requisite links
https://docs.aws.amazon.com/eks/latest/userguide/getting-started-eksctl.html

## Have Helm installed in your VM
helm version --short

## What Kubernetes Ingress
"Kubernetes Ingress is an API object that provides routing rules to manage external user`s access to the services in a Kubernetes cluster,
typically via HTTPS/HTTP"

## Create EKS cluster
eksctl create cluster --name ${Cluster-Name} --node-type (Eg. t3.medium) --nodes 3 --nodes-min 3 --nodes-max 5 --region us-east-1 --zones=us-east-1a,us-east-1b,us-east-1d

## Get EKS Cluster service to check if cluster has been created properly
eksctl get cluster --name ${Cluster-Name} --region us-east-1

## Create IAM OIDC provider
eksctl utils associate-iam-oidc-provider --region us-east-1 --cluster ${Cluster-Name} --approve

##Download IAM policy for the AWS Load Balancer Controller
curl -o iam-policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json

## Create an IAM policy called AWSLoadBalancerControllerIAMPolicy using the earlier downloaded iam_policy.json
aws iam create-policy --policy-name AWSLoadBalancerControllerIAMPolicy --policy-document file://iam_policy.json

## Create a IAM role and ServiceAccount
eksctl create iamserviceaccount --cluster ${Cluster-Name} --namespace kube-system --name aws-load-balancer-controller --attach-policy-arn arn:aws:iam::<AWS_ACCOUNT_ID>:policy/AWSLoadBalancerControllerIAMPolicy --override-existing-serviceaccounts --approve

## Install the TargetGroupBinding CRDs
kubectl apply -k github.com/aws/eks-charts/stable/aws-load-balancer-controller/crds?ref=master
kubectl get crd

INSTALLING THE CHART
## Deploy the Helm chart
helm repo add eks https://aws.github.io/eks-charts

## Configure AWS ALB (Apllication Load Balancer) to sit infront of Ingress
helm upgrade -i aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=${Cluster-Name} --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller --set image.tag="v2.2.0"

## To check if the above step has deployed AWS ALB
kubectl -n kube-system rollout status deployment aws-load-balancer-controller

## Deploy Sample Application (Optional) You can deploy your own application of which you have the deployment file
kubectl apply -f .\SampleApp.yaml

## Verify Ingress
kubectl get ingress/${Name-of-the-Ingress} -n game-2048

## Get Ingress URL
kubectl get ingress/${Name-of-the-Ingress} -n game-2048 -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'

## Get EKS Pod data.
kubectl get pods --all-namespaces

## Delete EKS cluster
eksctl delete cluster --name ${Cluster-Name} --region us-east-1
